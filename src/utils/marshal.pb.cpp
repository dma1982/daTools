// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marshal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marshal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ogl
{

    namespace
    {

        const ::google::protobuf::Descriptor* JobRunnerOption_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
        JobRunnerOption_reflection_ = NULL;
        const ::google::protobuf::Descriptor* JobOption_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
        JobOption_reflection_ = NULL;
        const ::google::protobuf::Descriptor* TaskOption_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
        TaskOption_reflection_ = NULL;
        const ::google::protobuf::Descriptor* Exception_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
        Exception_reflection_ = NULL;
        const ::google::protobuf::Descriptor* CommandHeader_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
        CommandHeader_reflection_ = NULL;

    }  // namespace


    void protobuf_AssignDesc_marshal_2eproto()
    {
        protobuf_AddDesc_marshal_2eproto();
        const ::google::protobuf::FileDescriptor* file =
            ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "marshal.proto");
        GOOGLE_CHECK(file != NULL);
        JobRunnerOption_descriptor_ = file->message_type(0);
        static const int JobRunnerOption_offsets_[3] =
        {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRunnerOption, runner_id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRunnerOption, runner_mgr_id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRunnerOption, pid_),
        };
        JobRunnerOption_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
            JobRunnerOption_descriptor_,
            JobRunnerOption::default_instance_,
            JobRunnerOption_offsets_,
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRunnerOption, _has_bits_[0]),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRunnerOption, _unknown_fields_),
            -1,
            ::google::protobuf::DescriptorPool::generated_pool(),
            ::google::protobuf::MessageFactory::generated_factory(),
            sizeof(JobRunnerOption));
        JobOption_descriptor_ = file->message_type(1);
        static const int JobOption_offsets_[8] =
        {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, priority_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, name_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, command_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, args_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, environment_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, work_directory_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, runner_id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, job_id_),
        };
        JobOption_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
            JobOption_descriptor_,
            JobOption::default_instance_,
            JobOption_offsets_,
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, _has_bits_[0]),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOption, _unknown_fields_),
            -1,
            ::google::protobuf::DescriptorPool::generated_pool(),
            ::google::protobuf::MessageFactory::generated_factory(),
            sizeof(JobOption));
        TaskOption_descriptor_ = file->message_type(2);
        static const int TaskOption_offsets_[7] =
        {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, task_input_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, task_output_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, priority_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, job_name_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, runner_id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, job_id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, task_id_),
        };
        TaskOption_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
            TaskOption_descriptor_,
            TaskOption::default_instance_,
            TaskOption_offsets_,
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, _has_bits_[0]),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOption, _unknown_fields_),
            -1,
            ::google::protobuf::DescriptorPool::generated_pool(),
            ::google::protobuf::MessageFactory::generated_factory(),
            sizeof(TaskOption));
        Exception_descriptor_ = file->message_type(3);
        static const int Exception_offsets_[1] =
        {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, message_),
        };
        Exception_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
            Exception_descriptor_,
            Exception::default_instance_,
            Exception_offsets_,
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, _has_bits_[0]),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, _unknown_fields_),
            -1,
            ::google::protobuf::DescriptorPool::generated_pool(),
            ::google::protobuf::MessageFactory::generated_factory(),
            sizeof(Exception));
        CommandHeader_descriptor_ = file->message_type(4);
        static const int CommandHeader_offsets_[3] =
        {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHeader, context_id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHeader, type_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHeader, data_size_),
        };
        CommandHeader_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
            CommandHeader_descriptor_,
            CommandHeader::default_instance_,
            CommandHeader_offsets_,
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHeader, _has_bits_[0]),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHeader, _unknown_fields_),
            -1,
            ::google::protobuf::DescriptorPool::generated_pool(),
            ::google::protobuf::MessageFactory::generated_factory(),
            sizeof(CommandHeader));
    }

    namespace
    {

        GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
        inline void protobuf_AssignDescriptorsOnce()
        {
            ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                               &protobuf_AssignDesc_marshal_2eproto);
        }

        void protobuf_RegisterTypes(const ::std::string&)
        {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                JobRunnerOption_descriptor_, &JobRunnerOption::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                JobOption_descriptor_, &JobOption::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                TaskOption_descriptor_, &TaskOption::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                Exception_descriptor_, &Exception::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                CommandHeader_descriptor_, &CommandHeader::default_instance());
        }

    }  // namespace

    void protobuf_ShutdownFile_marshal_2eproto()
    {
        delete JobRunnerOption::default_instance_;
        delete JobRunnerOption_reflection_;
        delete JobOption::default_instance_;
        delete JobOption_reflection_;
        delete TaskOption::default_instance_;
        delete TaskOption_reflection_;
        delete Exception::default_instance_;
        delete Exception_reflection_;
        delete CommandHeader::default_instance_;
        delete CommandHeader_reflection_;
    }

    void protobuf_AddDesc_marshal_2eproto()
    {
        static bool already_here = false;
        if (already_here) return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            "\n\rmarshal.proto\022\003ogl\"H\n\017JobRunnerOption\022"
            "\021\n\trunner_id\030\001 \001(\t\022\025\n\rrunner_mgr_id\030\002 \001("
            "\t\022\013\n\003pid\030\003 \001(\003\"\232\001\n\tJobOption\022\020\n\010priority"
            "\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\017\n\007command\030\003 \001(\t\022\014\n"
            "\004args\030\004 \003(\t\022\023\n\013environment\030\005 \003(\t\022\026\n\016work"
            "_directory\030\006 \001(\t\022\021\n\trunner_id\030\007 \001(\t\022\016\n\006j"
            "ob_id\030\010 \001(\003\"\215\001\n\nTaskOption\022\022\n\ntask_input"
            "\030\001 \001(\t\022\023\n\013task_output\030\002 \001(\t\022\020\n\010priority\030"
            "\003 \001(\003\022\020\n\010job_name\030\004 \001(\t\022\021\n\trunner_id\030\005 \001"
            "(\t\022\016\n\006job_id\030\006 \001(\003\022\017\n\007task_id\030\007 \001(\003\"\034\n\tE"
            "xception\022\017\n\007message\030\001 \001(\t\"D\n\rCommandHead"
            "er\022\022\n\ncontext_id\030\001 \001(\t\022\014\n\004type\030\002 \002(\005\022\021\n\t"
            "data_size\030\003 \001(\003", 495);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "marshal.proto", &protobuf_RegisterTypes);
        JobRunnerOption::default_instance_ = new JobRunnerOption();
        JobOption::default_instance_ = new JobOption();
        TaskOption::default_instance_ = new TaskOption();
        Exception::default_instance_ = new Exception();
        CommandHeader::default_instance_ = new CommandHeader();
        JobRunnerOption::default_instance_->InitAsDefaultInstance();
        JobOption::default_instance_->InitAsDefaultInstance();
        TaskOption::default_instance_->InitAsDefaultInstance();
        Exception::default_instance_->InitAsDefaultInstance();
        CommandHeader::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marshal_2eproto);
    }

// Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_marshal_2eproto
    {
        StaticDescriptorInitializer_marshal_2eproto()
        {
            protobuf_AddDesc_marshal_2eproto();
        }
    } static_descriptor_initializer_marshal_2eproto_;

// ===================================================================

#ifndef _MSC_VER
    const int JobRunnerOption::kRunnerIdFieldNumber;
    const int JobRunnerOption::kRunnerMgrIdFieldNumber;
    const int JobRunnerOption::kPidFieldNumber;
#endif  // !_MSC_VER

    JobRunnerOption::JobRunnerOption()
            : ::google::protobuf::Message()
    {
        SharedCtor();
    }

    void JobRunnerOption::InitAsDefaultInstance()
    {
    }

    JobRunnerOption::JobRunnerOption(const JobRunnerOption& from)
            : ::google::protobuf::Message()
    {
        SharedCtor();
        MergeFrom(from);
    }

    void JobRunnerOption::SharedCtor()
    {
        _cached_size_ = 0;
        runner_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        runner_mgr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        pid_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    JobRunnerOption::~JobRunnerOption()
    {
        SharedDtor();
    }

    void JobRunnerOption::SharedDtor()
    {
        if (runner_id_ != &::google::protobuf::internal::kEmptyString)
        {
            delete runner_id_;
        }
        if (runner_mgr_id_ != &::google::protobuf::internal::kEmptyString)
        {
            delete runner_mgr_id_;
        }
        if (this != default_instance_)
        {
        }
    }

    void JobRunnerOption::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* JobRunnerOption::descriptor()
    {
        protobuf_AssignDescriptorsOnce();
        return JobRunnerOption_descriptor_;
    }

    const JobRunnerOption& JobRunnerOption::default_instance()
    {
        if (default_instance_ == NULL) protobuf_AddDesc_marshal_2eproto();
        return *default_instance_;
    }

    JobRunnerOption* JobRunnerOption::default_instance_ = NULL;

    JobRunnerOption* JobRunnerOption::New() const
    {
        return new JobRunnerOption;
    }

    void JobRunnerOption::Clear()
    {
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (has_runner_id())
            {
                if (runner_id_ != &::google::protobuf::internal::kEmptyString)
                {
                    runner_id_->clear();
                }
            }
            if (has_runner_mgr_id())
            {
                if (runner_mgr_id_ != &::google::protobuf::internal::kEmptyString)
                {
                    runner_mgr_id_->clear();
                }
            }
            pid_ = GOOGLE_LONGLONG(0);
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool JobRunnerOption::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
        ::google::protobuf::uint32 tag;
        while ((tag = input->ReadTag()) != 0)
        {
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
            {
                // optional string runner_id = 1;
            case 1:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_runner_id()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->runner_id().data(), this->runner_id().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(18)) goto parse_runner_mgr_id;
                break;
            }

            // optional string runner_mgr_id = 2;
            case 2:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_runner_mgr_id:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_runner_mgr_id()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->runner_mgr_id().data(), this->runner_mgr_id().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(24)) goto parse_pid;
                break;
            }

            // optional int64 pid = 3;
            case 3:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_pid:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &pid_)));
                    set_has_pid();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectAtEnd()) return true;
                break;
            }

            default:
            {
handle_uninterpreted:
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
                {
                    return true;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
            }
        }
        return true;
#undef DO_
    }

    void JobRunnerOption::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // optional string runner_id = 1;
        if (has_runner_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_id().data(), this->runner_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                1, this->runner_id(), output);
        }

        // optional string runner_mgr_id = 2;
        if (has_runner_mgr_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_mgr_id().data(), this->runner_mgr_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                2, this->runner_mgr_id(), output);
        }

        // optional int64 pid = 3;
        if (has_pid())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
        }

        if (!unknown_fields().empty())
        {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
        }
    }

    ::google::protobuf::uint8* JobRunnerOption::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8* target) const
    {
        // optional string runner_id = 1;
        if (has_runner_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_id().data(), this->runner_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    1, this->runner_id(), target);
        }

        // optional string runner_mgr_id = 2;
        if (has_runner_mgr_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_mgr_id().data(), this->runner_mgr_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->runner_mgr_id(), target);
        }

        // optional int64 pid = 3;
        if (has_pid())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
        }

        if (!unknown_fields().empty())
        {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                         unknown_fields(), target);
        }
        return target;
    }

    int JobRunnerOption::ByteSize() const
    {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            // optional string runner_id = 1;
            if (has_runner_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->runner_id());
            }

            // optional string runner_mgr_id = 2;
            if (has_runner_mgr_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->runner_mgr_id());
            }

            // optional int64 pid = 3;
            if (has_pid())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->pid());
            }

        }
        if (!unknown_fields().empty())
        {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void JobRunnerOption::MergeFrom(const ::google::protobuf::Message& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        const JobRunnerOption* source =
            ::google::protobuf::internal::dynamic_cast_if_available<const JobRunnerOption*>(
                &from);
        if (source == NULL)
        {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            MergeFrom(*source);
        }
    }

    void JobRunnerOption::MergeFrom(const JobRunnerOption& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (from.has_runner_id())
            {
                set_runner_id(from.runner_id());
            }
            if (from.has_runner_mgr_id())
            {
                set_runner_mgr_id(from.runner_mgr_id());
            }
            if (from.has_pid())
            {
                set_pid(from.pid());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void JobRunnerOption::CopyFrom(const ::google::protobuf::Message& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void JobRunnerOption::CopyFrom(const JobRunnerOption& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool JobRunnerOption::IsInitialized() const
    {

        return true;
    }

    void JobRunnerOption::Swap(JobRunnerOption* other)
    {
        if (other != this)
        {
            std::swap(runner_id_, other->runner_id_);
            std::swap(runner_mgr_id_, other->runner_mgr_id_);
            std::swap(pid_, other->pid_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata JobRunnerOption::GetMetadata() const
    {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = JobRunnerOption_descriptor_;
        metadata.reflection = JobRunnerOption_reflection_;
        return metadata;
    }


// ===================================================================

#ifndef _MSC_VER
    const int JobOption::kPriorityFieldNumber;
    const int JobOption::kNameFieldNumber;
    const int JobOption::kCommandFieldNumber;
    const int JobOption::kArgsFieldNumber;
    const int JobOption::kEnvironmentFieldNumber;
    const int JobOption::kWorkDirectoryFieldNumber;
    const int JobOption::kRunnerIdFieldNumber;
    const int JobOption::kJobIdFieldNumber;
#endif  // !_MSC_VER

    JobOption::JobOption()
            : ::google::protobuf::Message()
    {
        SharedCtor();
    }

    void JobOption::InitAsDefaultInstance()
    {
    }

    JobOption::JobOption(const JobOption& from)
            : ::google::protobuf::Message()
    {
        SharedCtor();
        MergeFrom(from);
    }

    void JobOption::SharedCtor()
    {
        _cached_size_ = 0;
        priority_ = GOOGLE_LONGLONG(0);
        name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        work_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        runner_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        job_id_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    JobOption::~JobOption()
    {
        SharedDtor();
    }

    void JobOption::SharedDtor()
    {
        if (name_ != &::google::protobuf::internal::kEmptyString)
        {
            delete name_;
        }
        if (command_ != &::google::protobuf::internal::kEmptyString)
        {
            delete command_;
        }
        if (work_directory_ != &::google::protobuf::internal::kEmptyString)
        {
            delete work_directory_;
        }
        if (runner_id_ != &::google::protobuf::internal::kEmptyString)
        {
            delete runner_id_;
        }
        if (this != default_instance_)
        {
        }
    }

    void JobOption::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* JobOption::descriptor()
    {
        protobuf_AssignDescriptorsOnce();
        return JobOption_descriptor_;
    }

    const JobOption& JobOption::default_instance()
    {
        if (default_instance_ == NULL) protobuf_AddDesc_marshal_2eproto();
        return *default_instance_;
    }

    JobOption* JobOption::default_instance_ = NULL;

    JobOption* JobOption::New() const
    {
        return new JobOption;
    }

    void JobOption::Clear()
    {
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            priority_ = GOOGLE_LONGLONG(0);
            if (has_name())
            {
                if (name_ != &::google::protobuf::internal::kEmptyString)
                {
                    name_->clear();
                }
            }
            if (has_command())
            {
                if (command_ != &::google::protobuf::internal::kEmptyString)
                {
                    command_->clear();
                }
            }
            if (has_work_directory())
            {
                if (work_directory_ != &::google::protobuf::internal::kEmptyString)
                {
                    work_directory_->clear();
                }
            }
            if (has_runner_id())
            {
                if (runner_id_ != &::google::protobuf::internal::kEmptyString)
                {
                    runner_id_->clear();
                }
            }
            job_id_ = GOOGLE_LONGLONG(0);
        }
        args_.Clear();
        environment_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool JobOption::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
        ::google::protobuf::uint32 tag;
        while ((tag = input->ReadTag()) != 0)
        {
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
            {
                // optional int64 priority = 1;
            case 1:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &priority_)));
                    set_has_priority();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(18)) goto parse_name;
                break;
            }

            // optional string name = 2;
            case 2:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_name:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_name()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->name().data(), this->name().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(26)) goto parse_command;
                break;
            }

            // optional string command = 3;
            case 3:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_command:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_command()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->command().data(), this->command().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(34)) goto parse_args;
                break;
            }

            // repeated string args = 4;
            case 4:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_args:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->add_args()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->args(this->args_size() - 1).data(),
                        this->args(this->args_size() - 1).length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(34)) goto parse_args;
                if (input->ExpectTag(42)) goto parse_environment;
                break;
            }

            // repeated string environment = 5;
            case 5:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_environment:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->add_environment()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->environment(this->environment_size() - 1).data(),
                        this->environment(this->environment_size() - 1).length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(42)) goto parse_environment;
                if (input->ExpectTag(50)) goto parse_work_directory;
                break;
            }

            // optional string work_directory = 6;
            case 6:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_work_directory:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_work_directory()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->work_directory().data(), this->work_directory().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(58)) goto parse_runner_id;
                break;
            }

            // optional string runner_id = 7;
            case 7:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_runner_id:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_runner_id()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->runner_id().data(), this->runner_id().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(64)) goto parse_job_id;
                break;
            }

            // optional int64 job_id = 8;
            case 8:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_job_id:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &job_id_)));
                    set_has_job_id();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectAtEnd()) return true;
                break;
            }

            default:
            {
handle_uninterpreted:
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
                {
                    return true;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
            }
        }
        return true;
#undef DO_
    }

    void JobOption::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // optional int64 priority = 1;
        if (has_priority())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->priority(), output);
        }

        // optional string name = 2;
        if (has_name())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->name().data(), this->name().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                2, this->name(), output);
        }

        // optional string command = 3;
        if (has_command())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->command().data(), this->command().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                3, this->command(), output);
        }

        // repeated string args = 4;
        for (int i = 0; i < this->args_size(); i++)
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->args(i).data(), this->args(i).length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                4, this->args(i), output);
        }

        // repeated string environment = 5;
        for (int i = 0; i < this->environment_size(); i++)
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->environment(i).data(), this->environment(i).length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                5, this->environment(i), output);
        }

        // optional string work_directory = 6;
        if (has_work_directory())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->work_directory().data(), this->work_directory().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                6, this->work_directory(), output);
        }

        // optional string runner_id = 7;
        if (has_runner_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_id().data(), this->runner_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                7, this->runner_id(), output);
        }

        // optional int64 job_id = 8;
        if (has_job_id())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->job_id(), output);
        }

        if (!unknown_fields().empty())
        {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
        }
    }

    ::google::protobuf::uint8* JobOption::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8* target) const
    {
        // optional int64 priority = 1;
        if (has_priority())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->priority(), target);
        }

        // optional string name = 2;
        if (has_name())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->name().data(), this->name().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->name(), target);
        }

        // optional string command = 3;
        if (has_command())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->command().data(), this->command().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    3, this->command(), target);
        }

        // repeated string args = 4;
        for (int i = 0; i < this->args_size(); i++)
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->args(i).data(), this->args(i).length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target = ::google::protobuf::internal::WireFormatLite::
                     WriteStringToArray(4, this->args(i), target);
        }

        // repeated string environment = 5;
        for (int i = 0; i < this->environment_size(); i++)
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->environment(i).data(), this->environment(i).length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target = ::google::protobuf::internal::WireFormatLite::
                     WriteStringToArray(5, this->environment(i), target);
        }

        // optional string work_directory = 6;
        if (has_work_directory())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->work_directory().data(), this->work_directory().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    6, this->work_directory(), target);
        }

        // optional string runner_id = 7;
        if (has_runner_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_id().data(), this->runner_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    7, this->runner_id(), target);
        }

        // optional int64 job_id = 8;
        if (has_job_id())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->job_id(), target);
        }

        if (!unknown_fields().empty())
        {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                         unknown_fields(), target);
        }
        return target;
    }

    int JobOption::ByteSize() const
    {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            // optional int64 priority = 1;
            if (has_priority())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->priority());
            }

            // optional string name = 2;
            if (has_name())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->name());
            }

            // optional string command = 3;
            if (has_command())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->command());
            }

            // optional string work_directory = 6;
            if (has_work_directory())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->work_directory());
            }

            // optional string runner_id = 7;
            if (has_runner_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->runner_id());
            }

            // optional int64 job_id = 8;
            if (has_job_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->job_id());
            }

        }
        // repeated string args = 4;
        total_size += 1 * this->args_size();
        for (int i = 0; i < this->args_size(); i++)
        {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->args(i));
        }

        // repeated string environment = 5;
        total_size += 1 * this->environment_size();
        for (int i = 0; i < this->environment_size(); i++)
        {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->environment(i));
        }

        if (!unknown_fields().empty())
        {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void JobOption::MergeFrom(const ::google::protobuf::Message& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        const JobOption* source =
            ::google::protobuf::internal::dynamic_cast_if_available<const JobOption*>(
                &from);
        if (source == NULL)
        {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            MergeFrom(*source);
        }
    }

    void JobOption::MergeFrom(const JobOption& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        args_.MergeFrom(from.args_);
        environment_.MergeFrom(from.environment_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (from.has_priority())
            {
                set_priority(from.priority());
            }
            if (from.has_name())
            {
                set_name(from.name());
            }
            if (from.has_command())
            {
                set_command(from.command());
            }
            if (from.has_work_directory())
            {
                set_work_directory(from.work_directory());
            }
            if (from.has_runner_id())
            {
                set_runner_id(from.runner_id());
            }
            if (from.has_job_id())
            {
                set_job_id(from.job_id());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void JobOption::CopyFrom(const ::google::protobuf::Message& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void JobOption::CopyFrom(const JobOption& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool JobOption::IsInitialized() const
    {

        return true;
    }

    void JobOption::Swap(JobOption* other)
    {
        if (other != this)
        {
            std::swap(priority_, other->priority_);
            std::swap(name_, other->name_);
            std::swap(command_, other->command_);
            args_.Swap(&other->args_);
            environment_.Swap(&other->environment_);
            std::swap(work_directory_, other->work_directory_);
            std::swap(runner_id_, other->runner_id_);
            std::swap(job_id_, other->job_id_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata JobOption::GetMetadata() const
    {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = JobOption_descriptor_;
        metadata.reflection = JobOption_reflection_;
        return metadata;
    }


// ===================================================================

#ifndef _MSC_VER
    const int TaskOption::kTaskInputFieldNumber;
    const int TaskOption::kTaskOutputFieldNumber;
    const int TaskOption::kPriorityFieldNumber;
    const int TaskOption::kJobNameFieldNumber;
    const int TaskOption::kRunnerIdFieldNumber;
    const int TaskOption::kJobIdFieldNumber;
    const int TaskOption::kTaskIdFieldNumber;
#endif  // !_MSC_VER

    TaskOption::TaskOption()
            : ::google::protobuf::Message()
    {
        SharedCtor();
    }

    void TaskOption::InitAsDefaultInstance()
    {
    }

    TaskOption::TaskOption(const TaskOption& from)
            : ::google::protobuf::Message()
    {
        SharedCtor();
        MergeFrom(from);
    }

    void TaskOption::SharedCtor()
    {
        _cached_size_ = 0;
        task_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        task_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        priority_ = GOOGLE_LONGLONG(0);
        job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        runner_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        job_id_ = GOOGLE_LONGLONG(0);
        task_id_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    TaskOption::~TaskOption()
    {
        SharedDtor();
    }

    void TaskOption::SharedDtor()
    {
        if (task_input_ != &::google::protobuf::internal::kEmptyString)
        {
            delete task_input_;
        }
        if (task_output_ != &::google::protobuf::internal::kEmptyString)
        {
            delete task_output_;
        }
        if (job_name_ != &::google::protobuf::internal::kEmptyString)
        {
            delete job_name_;
        }
        if (runner_id_ != &::google::protobuf::internal::kEmptyString)
        {
            delete runner_id_;
        }
        if (this != default_instance_)
        {
        }
    }

    void TaskOption::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* TaskOption::descriptor()
    {
        protobuf_AssignDescriptorsOnce();
        return TaskOption_descriptor_;
    }

    const TaskOption& TaskOption::default_instance()
    {
        if (default_instance_ == NULL) protobuf_AddDesc_marshal_2eproto();
        return *default_instance_;
    }

    TaskOption* TaskOption::default_instance_ = NULL;

    TaskOption* TaskOption::New() const
    {
        return new TaskOption;
    }

    void TaskOption::Clear()
    {
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (has_task_input())
            {
                if (task_input_ != &::google::protobuf::internal::kEmptyString)
                {
                    task_input_->clear();
                }
            }
            if (has_task_output())
            {
                if (task_output_ != &::google::protobuf::internal::kEmptyString)
                {
                    task_output_->clear();
                }
            }
            priority_ = GOOGLE_LONGLONG(0);
            if (has_job_name())
            {
                if (job_name_ != &::google::protobuf::internal::kEmptyString)
                {
                    job_name_->clear();
                }
            }
            if (has_runner_id())
            {
                if (runner_id_ != &::google::protobuf::internal::kEmptyString)
                {
                    runner_id_->clear();
                }
            }
            job_id_ = GOOGLE_LONGLONG(0);
            task_id_ = GOOGLE_LONGLONG(0);
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool TaskOption::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
        ::google::protobuf::uint32 tag;
        while ((tag = input->ReadTag()) != 0)
        {
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
            {
                // optional string task_input = 1;
            case 1:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_task_input()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->task_input().data(), this->task_input().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(18)) goto parse_task_output;
                break;
            }

            // optional string task_output = 2;
            case 2:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_task_output:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_task_output()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->task_output().data(), this->task_output().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(24)) goto parse_priority;
                break;
            }

            // optional int64 priority = 3;
            case 3:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_priority:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &priority_)));
                    set_has_priority();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(34)) goto parse_job_name;
                break;
            }

            // optional string job_name = 4;
            case 4:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_job_name:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_job_name()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->job_name().data(), this->job_name().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(42)) goto parse_runner_id;
                break;
            }

            // optional string runner_id = 5;
            case 5:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
parse_runner_id:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_runner_id()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->runner_id().data(), this->runner_id().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(48)) goto parse_job_id;
                break;
            }

            // optional int64 job_id = 6;
            case 6:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_job_id:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &job_id_)));
                    set_has_job_id();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(56)) goto parse_task_id;
                break;
            }

            // optional int64 task_id = 7;
            case 7:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_task_id:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &task_id_)));
                    set_has_task_id();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectAtEnd()) return true;
                break;
            }

            default:
            {
handle_uninterpreted:
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
                {
                    return true;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
            }
        }
        return true;
#undef DO_
    }

    void TaskOption::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // optional string task_input = 1;
        if (has_task_input())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->task_input().data(), this->task_input().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                1, this->task_input(), output);
        }

        // optional string task_output = 2;
        if (has_task_output())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->task_output().data(), this->task_output().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                2, this->task_output(), output);
        }

        // optional int64 priority = 3;
        if (has_priority())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->priority(), output);
        }

        // optional string job_name = 4;
        if (has_job_name())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->job_name().data(), this->job_name().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                4, this->job_name(), output);
        }

        // optional string runner_id = 5;
        if (has_runner_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_id().data(), this->runner_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                5, this->runner_id(), output);
        }

        // optional int64 job_id = 6;
        if (has_job_id())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->job_id(), output);
        }

        // optional int64 task_id = 7;
        if (has_task_id())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->task_id(), output);
        }

        if (!unknown_fields().empty())
        {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
        }
    }

    ::google::protobuf::uint8* TaskOption::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8* target) const
    {
        // optional string task_input = 1;
        if (has_task_input())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->task_input().data(), this->task_input().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    1, this->task_input(), target);
        }

        // optional string task_output = 2;
        if (has_task_output())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->task_output().data(), this->task_output().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->task_output(), target);
        }

        // optional int64 priority = 3;
        if (has_priority())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->priority(), target);
        }

        // optional string job_name = 4;
        if (has_job_name())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->job_name().data(), this->job_name().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    4, this->job_name(), target);
        }

        // optional string runner_id = 5;
        if (has_runner_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->runner_id().data(), this->runner_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    5, this->runner_id(), target);
        }

        // optional int64 job_id = 6;
        if (has_job_id())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->job_id(), target);
        }

        // optional int64 task_id = 7;
        if (has_task_id())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->task_id(), target);
        }

        if (!unknown_fields().empty())
        {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                         unknown_fields(), target);
        }
        return target;
    }

    int TaskOption::ByteSize() const
    {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            // optional string task_input = 1;
            if (has_task_input())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->task_input());
            }

            // optional string task_output = 2;
            if (has_task_output())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->task_output());
            }

            // optional int64 priority = 3;
            if (has_priority())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->priority());
            }

            // optional string job_name = 4;
            if (has_job_name())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->job_name());
            }

            // optional string runner_id = 5;
            if (has_runner_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->runner_id());
            }

            // optional int64 job_id = 6;
            if (has_job_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->job_id());
            }

            // optional int64 task_id = 7;
            if (has_task_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->task_id());
            }

        }
        if (!unknown_fields().empty())
        {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void TaskOption::MergeFrom(const ::google::protobuf::Message& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        const TaskOption* source =
            ::google::protobuf::internal::dynamic_cast_if_available<const TaskOption*>(
                &from);
        if (source == NULL)
        {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            MergeFrom(*source);
        }
    }

    void TaskOption::MergeFrom(const TaskOption& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (from.has_task_input())
            {
                set_task_input(from.task_input());
            }
            if (from.has_task_output())
            {
                set_task_output(from.task_output());
            }
            if (from.has_priority())
            {
                set_priority(from.priority());
            }
            if (from.has_job_name())
            {
                set_job_name(from.job_name());
            }
            if (from.has_runner_id())
            {
                set_runner_id(from.runner_id());
            }
            if (from.has_job_id())
            {
                set_job_id(from.job_id());
            }
            if (from.has_task_id())
            {
                set_task_id(from.task_id());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void TaskOption::CopyFrom(const ::google::protobuf::Message& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void TaskOption::CopyFrom(const TaskOption& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TaskOption::IsInitialized() const
    {

        return true;
    }

    void TaskOption::Swap(TaskOption* other)
    {
        if (other != this)
        {
            std::swap(task_input_, other->task_input_);
            std::swap(task_output_, other->task_output_);
            std::swap(priority_, other->priority_);
            std::swap(job_name_, other->job_name_);
            std::swap(runner_id_, other->runner_id_);
            std::swap(job_id_, other->job_id_);
            std::swap(task_id_, other->task_id_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata TaskOption::GetMetadata() const
    {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = TaskOption_descriptor_;
        metadata.reflection = TaskOption_reflection_;
        return metadata;
    }


// ===================================================================

#ifndef _MSC_VER
    const int Exception::kMessageFieldNumber;
#endif  // !_MSC_VER

    Exception::Exception()
            : ::google::protobuf::Message()
    {
        SharedCtor();
    }

    void Exception::InitAsDefaultInstance()
    {
    }

    Exception::Exception(const Exception& from)
            : ::google::protobuf::Message()
    {
        SharedCtor();
        MergeFrom(from);
    }

    void Exception::SharedCtor()
    {
        _cached_size_ = 0;
        message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Exception::~Exception()
    {
        SharedDtor();
    }

    void Exception::SharedDtor()
    {
        if (message_ != &::google::protobuf::internal::kEmptyString)
        {
            delete message_;
        }
        if (this != default_instance_)
        {
        }
    }

    void Exception::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* Exception::descriptor()
    {
        protobuf_AssignDescriptorsOnce();
        return Exception_descriptor_;
    }

    const Exception& Exception::default_instance()
    {
        if (default_instance_ == NULL) protobuf_AddDesc_marshal_2eproto();
        return *default_instance_;
    }

    Exception* Exception::default_instance_ = NULL;

    Exception* Exception::New() const
    {
        return new Exception;
    }

    void Exception::Clear()
    {
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (has_message())
            {
                if (message_ != &::google::protobuf::internal::kEmptyString)
                {
                    message_->clear();
                }
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool Exception::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
        ::google::protobuf::uint32 tag;
        while ((tag = input->ReadTag()) != 0)
        {
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
            {
                // optional string message = 1;
            case 1:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_message()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->message().data(), this->message().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectAtEnd()) return true;
                break;
            }

            default:
            {
handle_uninterpreted:
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
                {
                    return true;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
            }
        }
        return true;
#undef DO_
    }

    void Exception::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // optional string message = 1;
        if (has_message())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->message().data(), this->message().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                1, this->message(), output);
        }

        if (!unknown_fields().empty())
        {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
        }
    }

    ::google::protobuf::uint8* Exception::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8* target) const
    {
        // optional string message = 1;
        if (has_message())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->message().data(), this->message().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    1, this->message(), target);
        }

        if (!unknown_fields().empty())
        {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                         unknown_fields(), target);
        }
        return target;
    }

    int Exception::ByteSize() const
    {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            // optional string message = 1;
            if (has_message())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->message());
            }

        }
        if (!unknown_fields().empty())
        {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Exception::MergeFrom(const ::google::protobuf::Message& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        const Exception* source =
            ::google::protobuf::internal::dynamic_cast_if_available<const Exception*>(
                &from);
        if (source == NULL)
        {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            MergeFrom(*source);
        }
    }

    void Exception::MergeFrom(const Exception& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (from.has_message())
            {
                set_message(from.message());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void Exception::CopyFrom(const ::google::protobuf::Message& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void Exception::CopyFrom(const Exception& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool Exception::IsInitialized() const
    {

        return true;
    }

    void Exception::Swap(Exception* other)
    {
        if (other != this)
        {
            std::swap(message_, other->message_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata Exception::GetMetadata() const
    {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = Exception_descriptor_;
        metadata.reflection = Exception_reflection_;
        return metadata;
    }


// ===================================================================

#ifndef _MSC_VER
    const int CommandHeader::kContextIdFieldNumber;
    const int CommandHeader::kTypeFieldNumber;
    const int CommandHeader::kDataSizeFieldNumber;
#endif  // !_MSC_VER

    CommandHeader::CommandHeader()
            : ::google::protobuf::Message()
    {
        SharedCtor();
    }

    void CommandHeader::InitAsDefaultInstance()
    {
    }

    CommandHeader::CommandHeader(const CommandHeader& from)
            : ::google::protobuf::Message()
    {
        SharedCtor();
        MergeFrom(from);
    }

    void CommandHeader::SharedCtor()
    {
        _cached_size_ = 0;
        context_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        type_ = 0;
        data_size_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    CommandHeader::~CommandHeader()
    {
        SharedDtor();
    }

    void CommandHeader::SharedDtor()
    {
        if (context_id_ != &::google::protobuf::internal::kEmptyString)
        {
            delete context_id_;
        }
        if (this != default_instance_)
        {
        }
    }

    void CommandHeader::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* CommandHeader::descriptor()
    {
        protobuf_AssignDescriptorsOnce();
        return CommandHeader_descriptor_;
    }

    const CommandHeader& CommandHeader::default_instance()
    {
        if (default_instance_ == NULL) protobuf_AddDesc_marshal_2eproto();
        return *default_instance_;
    }

    CommandHeader* CommandHeader::default_instance_ = NULL;

    CommandHeader* CommandHeader::New() const
    {
        return new CommandHeader;
    }

    void CommandHeader::Clear()
    {
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (has_context_id())
            {
                if (context_id_ != &::google::protobuf::internal::kEmptyString)
                {
                    context_id_->clear();
                }
            }
            type_ = 0;
            data_size_ = GOOGLE_LONGLONG(0);
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool CommandHeader::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
        ::google::protobuf::uint32 tag;
        while ((tag = input->ReadTag()) != 0)
        {
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
            {
                // optional string context_id = 1;
            case 1:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_context_id()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->context_id().data(), this->context_id().length(),
                        ::google::protobuf::internal::WireFormat::PARSE);
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(16)) goto parse_type;
                break;
            }

            // required int32 type = 2;
            case 2:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_type:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32 > (
                             input, &type_)));
                    set_has_type();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectTag(24)) goto parse_data_size;
                break;
            }

            // optional int64 data_size = 3;
            case 3:
            {
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
                {
parse_data_size:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                         ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                             input, &data_size_)));
                    set_has_data_size();
                }
                else
                {
                    goto handle_uninterpreted;
                }
                if (input->ExpectAtEnd()) return true;
                break;
            }

            default:
            {
handle_uninterpreted:
                if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
                {
                    return true;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
            }
        }
        return true;
#undef DO_
    }

    void CommandHeader::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // optional string context_id = 1;
        if (has_context_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->context_id().data(), this->context_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                1, this->context_id(), output);
        }

        // required int32 type = 2;
        if (has_type())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
        }

        // optional int64 data_size = 3;
        if (has_data_size())
        {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data_size(), output);
        }

        if (!unknown_fields().empty())
        {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
        }
    }

    ::google::protobuf::uint8* CommandHeader::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8* target) const
    {
        // optional string context_id = 1;
        if (has_context_id())
        {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                this->context_id().data(), this->context_id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    1, this->context_id(), target);
        }

        // required int32 type = 2;
        if (has_type())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
        }

        // optional int64 data_size = 3;
        if (has_data_size())
        {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->data_size(), target);
        }

        if (!unknown_fields().empty())
        {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                         unknown_fields(), target);
        }
        return target;
    }

    int CommandHeader::ByteSize() const
    {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            // optional string context_id = 1;
            if (has_context_id())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->context_id());
            }

            // required int32 type = 2;
            if (has_type())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                  this->type());
            }

            // optional int64 data_size = 3;
            if (has_data_size())
            {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                  this->data_size());
            }

        }
        if (!unknown_fields().empty())
        {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void CommandHeader::MergeFrom(const ::google::protobuf::Message& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        const CommandHeader* source =
            ::google::protobuf::internal::dynamic_cast_if_available<const CommandHeader*>(
                &from);
        if (source == NULL)
        {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            MergeFrom(*source);
        }
    }

    void CommandHeader::MergeFrom(const CommandHeader& from)
    {
        GOOGLE_CHECK_NE(&from, this);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
        {
            if (from.has_context_id())
            {
                set_context_id(from.context_id());
            }
            if (from.has_type())
            {
                set_type(from.type());
            }
            if (from.has_data_size())
            {
                set_data_size(from.data_size());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void CommandHeader::CopyFrom(const ::google::protobuf::Message& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void CommandHeader::CopyFrom(const CommandHeader& from)
    {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool CommandHeader::IsInitialized() const
    {
        if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

        return true;
    }

    void CommandHeader::Swap(CommandHeader* other)
    {
        if (other != this)
        {
            std::swap(context_id_, other->context_id_);
            std::swap(type_, other->type_);
            std::swap(data_size_, other->data_size_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata CommandHeader::GetMetadata() const
    {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = CommandHeader_descriptor_;
        metadata.reflection = CommandHeader_reflection_;
        return metadata;
    }


// @@protoc_insertion_point(namespace_scope)

}  // namespace ogl

// @@protoc_insertion_point(global_scope)
